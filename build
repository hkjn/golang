set -euo pipefail

declare DOCKER_USER="hkjn"
declare DOCKER_IMAGE="golang"
declare CPU_ARCH="$(uname -m)"
declare VERSIONS="
1.8.3
1.9.1
tip
"
declare NO_PUSH=${NO_PUSH:-""}
declare -A DOCKER_ARCHS

DOCKER_ARCHS["x86_64"]="amd64"
DOCKER_ARCHS["armv7l"]="arm"

declare DOCKER_ARCH=${DOCKER_ARCHS[${CPU_ARCH}]}

if [[ ! ${DOCKER_ARCH} ]]; then
	echo "FATAL: Unsupported CPU arch ${CPU_ARCH}." >&2
        exit 1
fi

for VERSION in ${VERSIONS}; do
	TAG="${DOCKER_USER}/${DOCKER_IMAGE}:${DOCKER_ARCH}-${VERSION}"
	echo "Building ${DOCKER_ARCH}.."
	docker build -t ${TAG} -f Dockerfile.${VERSION} .
done

docker tag ${DOCKER_USER}/${DOCKER_IMAGE}:${DOCKER_ARCH}-1.9.1 ${DOCKER_USER}/${DOCKER_IMAGE}:${DOCKER_ARCH}

if [[ ! "${NO_PUSH}" ]]; then
	echo "Pushing images.."
	for VERSION in ${VERSIONS}; do
		docker push ${TAG}
	done
	docker push ${DOCKER_USER}/${DOCKER_IMAGE}:${DOCKER_ARCH}
fi

if ! which manifest-tool 1>/dev/null; then
	echo "FATAL: No manifest-tool found on PATH, can't push multi-arch manifests." >&2
	exit 1
fi
echo "Pushing multi-arch manifests.."
for VERSION in ${VERSIONS}; do
	manifest-tool push from-args --platforms linux/amd64,linux/arm --template hkjn/golang:ARCH-${VERSION} --target hkjn/golang:${VERSION}
done
